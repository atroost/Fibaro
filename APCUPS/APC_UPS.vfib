{"name":"APC UPS","type":"virtual_device","properties":{"deviceIcon":1046,"categories":"[\"other\"]","currentIcon":"1046","log":"","logTemp":"","mainLoop":"local selfId = fibaro:getSelfId();\nfibaro:call(selfId, \"pressButton\", \"5\");\nfibaro:sleep(1*60*1000)\n","ui.lblBattery.value":"100.0 Percent","ui.lblError.value":"","ui.lblModel.value":"Back-UPS ES 700G","ui.lblStatus.value":"ONLINE","ui.lblTime.value":"12.1 Minutes","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Model","name":"lblModel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Status","name":"lblStatus","favourite":false,"main":true}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Battery level","name":"lblBattery","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"Time left","name":"lblTime","favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Update","name":"btnUpdate","empty":false,"msg":"local debug = true\nlocal selfId = fibaro:getSelfId();\nlocal ip = fibaro:get(selfId, 'IPAddress');\nlocal port = fibaro:get(selfId, 'TCPPort');\nlocal currentDate = os.date(\"*t\");\nlocal currentTime = os.date(\"%H:%M\");\nlocal icon = {\"1046\",\"1047\"}\nlocal Remko = json.decode(fibaro:getGlobalValue(\"Remko\"))\nlocal sendMessageID = tonumber(fibaro:getGlobalValue(\"sendMessage\"))\n\nlocal function log(str) if debug then fibaro:debug(tostring(str)); end; end\nlocal function errorlog(str) fibaro:debug(\"<font color='red'>\"..tostring(str)..\"</font>\"); end\n\nif httpSocket == nil then\n  httpSocket = Net.FHttp(ip, port);\nend\n\nfibaro:call(selfId, \"setProperty\", \"ui.lblError.value\", \"Getting data...\");\nfibaro:log(\"Getting data...\");\nresponse, status, errorCode = httpSocket:GET(\"/cgi-bin/apcupsd/upsstats_fibaro.cgi\")\nif tonumber(status) == 200 and tonumber(errorCode) == 0 then\n  if response and response ~= \"\" then\n    arrData = json.decode(response);\n    -- zet resultaten in de labels\n    if arrData[\"MODEL\"] then fibaro:call(selfId, \"setProperty\", \"ui.lblModel.value\", arrData[\"MODEL\"]); end\n    if arrData[\"TIMELEFT\"] then fibaro:call(selfId, \"setProperty\", \"ui.lblTime.value\", arrData[\"TIMELEFT\"]); end\n    if arrData[\"BCHARGE\"] then fibaro:call(selfId, \"setProperty\", \"ui.lblBattery.value\", arrData[\"BCHARGE\"]); end\n    if arrData[\"STATUS\"] then fibaro:call(selfId, \"setProperty\", \"ui.lblStatus.value\", arrData[\"STATUS\"]); end\n    if arrData[\"STATUS\"] == \"ONLINE\" then\n      fibaro:call(selfId, \"setProperty\", \"currentIcon\", icon[1])\n    else\n      fibaro:call(selfId, \"setProperty\", \"currentIcon\", icon[2])\n      fibaro:startScene(sendMessageID,{{true, {Remko[\"phoneid\"]}},{true,{Remko[\"userid\"]}},{false},{true, \"100\"},{false},\"UPS Error\",arrData[\"STATUS\"]})\n    end\n    fibaro:call(selfId, \"setProperty\", \"ui.lblError.value\", \"\");\n    fibaro:log(\"transfer ok\");\n    \n  else\n    fibaro:debug(\"Error getting data, empty result...\");\n    fibaro:log(\"Error getting data, empty result...\");\n    fibaro:call(selfId, \"setProperty\", \"ui.lblError.value\", \"Error getting data\");\n  end\nelse\n  errorlog(\"error: \"..status..\",\"..errorCode);\n  fibaro:log(\"Error getting data...\");\n  fibaro:call(selfId, \"setProperty\", \"ui.lblError.value\", \"Error getting data\");\nend","buttonIcon":1016,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"","name":"lblError","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}